{% extends 'base.html.twig' %}

{% block title %}{{parent()}}Profil{% endblock %}

{% block content %}
<div class="container mt-3">
    <div class="row">
    <h1>Mes infos</h1>
    <div id="userEmail">
        <span>Addresse email: </span>
        <span>{{ app.user.email }}</span>
        <br>
        <a class="modal-trigger" href="#updateEmailModal">Modifier mon email</a>
    </div>
    <div id="userPssword">
        <a class="modal-trigger" href="#updatePasswordModal">Modifier mon mot de passe</a>
    </div>
    <div id="updatePasswordModal" class="modal">
        {{ form_start(passwordForm) }}
        <div class="modal-content">
            <h4>Modification de mot de passe</h4>
            <div class="row">
                <div class="col s12 input-field">
                    {{ form_widget(passwordForm.currentPassword) }}
                    {{ form_label(passwordForm.currentPassword) }}
                    {% if passwordForm.currentPassword.vars.errors is not empty %}
                    <small class="red-text">{{ passwordForm.currentPassword.vars.errors[0].message }}</small>
                    {% endif %}
                </div>
                <div class="col s12 m6 input-field">
                    {{ form_widget(passwordForm.newPassword.first) }}
                    {{ form_label(passwordForm.newPassword.first) }}
                    {% if passwordForm.newPassword.first.vars.errors is not empty %}
                    <small class="red-text">{{ passwordForm.newPassword.first.vars.errors[0].message }}</small>
                    {% endif %}
                </div>
                <div class="col s12 m6 input-field">
                    {{ form_widget(passwordForm.newPassword.second) }}
                    {{ form_label(passwordForm.newPassword.second) }}
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="modal-close waves-effect waves-grey grey btn-flat">annuler</button>
            {{ form_widget(passwordForm.update, {'attr': {'class': 'waves-effect waves-green green btn-flat'}, 'label': 'modifier'}) }}
        </div>
        {{ form_end(passwordForm) }}
    </div>
    <div id="updateEmailModal" class="modal">
        {{ form_start(emailForm) }}
        <div class="modal-content">
            <h4>Modification de l'addresse email</h4>
            <div class="input-field">
                {{ form_widget(emailForm.email) }}
                {{ form_label(emailForm.email) }}
                {% if emailForm.email.vars.errors is not empty %}
                <small class="red-text">{{ emailForm.email.vars.errors[0].message }}</small>
                {% endif %}

            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="modal-close waves-effect waves-grey grey btn-flat">annuler</button>
            {{ form_widget(emailForm.update, {'attr': {'class': 'waves-effect waves-green green btn-flat'}, 'label': 'modifier'}) }}
        </div>
        {{ form_end(emailForm) }}
    </div>

    <h1>Mes Compétences</h1>
    <div class="row">
        <div class="input-field col m12 l10">
            <input type="text" id="autocomplete-input" class="autocomplete">
            <label for="autocomplete-input">Ajouter une compétences</label>
        </div>
        <div class="col m12 l2">
            <button class="btn w-100" id="compAdd" disabled><i class="material-icons large">add</i></button>
        </div>
        <input type="hidden" id="compId">
    </div>
        {% for main, group in competences %}
            <div class="col s12 m3 ml-1 mr-1 mt-1 mb-1" style="border: solid black 1px">
                <p>{{main}}</p>
                <ul class="browser-default">
                {% for comp in group %}
                    {% if comp.level > 0 %}
                        <li>{{ comp.libelle }}</li>
                    {% endif %}
                {% endfor %}
                </ul>
            </div>
        {% endfor %}
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
$(() => {
    var emailMod = M.Modal.init($('#updateEmailModal'))[0];
    var pswdMod = M.Modal.init($('#updatePasswordModal'))[0];
    {% if emailForm.email.vars.errors is not empty %}
        emailMod.open();
    {% endif %}
    {% if passwordForm.currentPassword.vars.errors is not empty or passwordForm.newPassword.first.vars.errors is not empty %}
        pswdMod.open();
    {% endif %}

    $('#compAdd').click(() => {
        let id = $('#compId').val();
        if (id != "") {
            fetch('http://s3-4380.nuage-peda.fr/mescompetences.dev/public/profil/addcompetence/'+id)
                .then(() => {
                    window.location.reload();
                });
        }
    });

    var autoComplete = M.Autocomplete.init($('#autocomplete-input'), {
      data: {},
      onAutocomplete: onAutocomplete,
    })[0];
    $('#autocomplete-input').on('input', () => {
        let value = $('#autocomplete-input').val();
        if (!$('#compAdd').prop('disabled')) {
            $('#compAdd').prop('disabled', true);
        }
        fetch('http://s3-4380.nuage-peda.fr/mescompetences.dev/public/api/competences?libelle='+value)
            .then(response => {
                return response.json();
            })
            .then(data => {
                let choices = data['hydra:member'].reduce(function(map, obj) {
                    map[obj.libelle] = null;
                    return map;
                }, {});
                autoComplete.updateData(choices);
            })
            .catch(error => {
                console.error(error);
            })
        ;
    });
});
function onAutocomplete(value) {
    console.log(value);
    fetch('http://s3-4380.nuage-peda.fr/mescompetences.dev/public/api/competences?libelle='+value)
        .then(response => {
            return response.json();
        })
        .then(data => {
            let comp = data['hydra:member'][0];
            $('#compId').val(comp['id']);
            $('#compId').data('competence', comp);
            $('#compAdd').prop('disabled', false);
        })
        .catch(error => {
            $('#compAdd').prop('disabled', true);
            console.error(error);
        })
    ;
}
</script>
{% endblock %}